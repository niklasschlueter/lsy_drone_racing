# Level 0

# | Evaluation Scenario | Rand. Inertial Properties | Randomized Obstacles, Gates | Notes             |
# | :-----------------: | :-----------------------: | :-------------------------: | :---------------: |
# | `level0.toml`       | *No*                      | *No*                        | Perfect knowledge |
[controller]
#file = "attitude_mpc.py" # Put your controller file name here. Specifying a controller as argument to scripts will override this setting. Controllers are located in `lsy_drone_racing/control/`
#file = "/home/niklas/repos/master_thesis/inv_rl/clean_jax/inv_rl/control/quadrotor/attitude_mpc.py"
#file = "/home/niklas/repos/master_thesis/mpcc/mpcc/control/controller_single_wrapper.py"
#file = "/home/niklas/repos/master_thesis/inv_rl/clean_jax/inv_rl/attitude_mpc_wrapper.py"
file = "/home/niklas/repos/master_thesis/inv_rl/clean_jax/inv_rl/attitude_mpc_wrapper.py"


[deploy]
### Settings only relevant for deployment
# Whether to check if gate and obstacle positions observed by vicon are within the limits defined down below.
check_race_track = true
# Whether to check if the drone start position is within the limits specified down below.
check_drone_start_pos = true
# Lets you practice your controller without putting up gates & obstacles, assumes nominal positions given below.
practice_without_track_objects = false

[[deploy.drones]]
id = 91
channel = 100

[sim]
# Physics options:
# "analytical": Analytical, simplified dynamics model
# "mujoco": Mujoco dynamics. May take longer to compile at startup.
# "sys_id": System identification model.
physics = "analytical"

camera_view = [5.0, -40.0, -40.0, 0.5, -1.0, 0.5]
freq = 400                                        # Simulation frequency, in Hz
attitude_freq = 400                               # Controller frequency, in Hz. This frequency is used to simulate the onboard controller, NOT for the environment's step function
gui = true # Enable/disable PyBullet's GUI

[env]
id = "DroneRacing-v0"   # "DroneRacing-v0" for single races, "MultiDroneRacing-v0" for multi-drone races. Each environment also implements a vector-environment for faster training
seed = 1337             # Random seed
freq = 50               # Frequency of the environment's step function, in Hz
sensor_range = 50.0      # Range at which the exact location of gates and obstacles become visible to the drone. Objects that are not in the drone's sensor range report their nominal position.
control_mode = "attitude"  # Control mode of the environment. Can be either "state" or "attitude"

[[env.track.gates]]
pos = [1.0, 1.0, 0.56]
rpy = [0.0, 0.0, 1.57]
[[env.track.gates]]
pos = [-1.0, 1.0, 1.11]
rpy = [0.0, 0.0, 1.57]
[[env.track.gates]]
pos = [-1.0, -1.0, 0.56]
rpy = [0.0, 0.0, -1.57]
[[env.track.gates]]
pos = [1.0, -1.0, 1.11]
rpy = [0.0, 0.0, -1.57]

#[[env.track.gates]]
#pos = [1.0, 1.0, 0.56]
#rpy = [0.0, 0.0, 1.57]
#[[env.track.gates]]
#pos = [-1.0, 1.0, 1.11]
#rpy = [0.0, 0.0, 1.57]
#[[env.track.gates]]
#pos = [-1.0, -1.0, 0.56]
#rpy = [0.0, 0.0, -1.57]
#[[env.track.gates]]
#pos = [1.0, -1.0, 1.11]
#rpy = [0.0, 0.0, -1.57]

# Obstacle height: 1.4m. Height is measured from the ground to the top of the obstacle.
[[env.track.obstacles]]
pos = [0.0, 0.0, 1.4]

[[env.track.drones]]
pos = [1.0, 1.5, 0.07]
rpy = [0, 0, 0]
vel = [0, 0, 0]
ang_vel = [0, 0, 0]

#[env.disturbances.action]
#fn = "normal"
#scale = 0.001
#
#[env.disturbances.dynamics]
#fn = "uniform"
#[env.disturbances.dynamics.kwargs]
#minval = [-0.1, -0.1, -0.1]
#maxval = [0.1, 0.1, 0.1]
#
#[env.randomizations.drone_pos]
#fn = "uniform"
#[env.randomizations.drone_pos.kwargs]
#minval = [-0.3, -0.3, 0.0]
#maxval = [0.3, 0.3, 0.02]
